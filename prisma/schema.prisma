// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  avatarUrl     String
  githubId      Int            @unique
  githubToken   GithubToken?
  neovimConfigs NeovimConfig[]
  createdAt     DateTime       @default(now())
  lastLoginAt   DateTime       @default(now())
  loginCount    Int            @default(0)
}

model GithubToken {
  id          Int      @id @default(autoincrement())
  accessToken String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @unique
  createdAt   DateTime @default(now())
}

model NeovimConfig {
  id            Int                  @id @default(autoincrement())
  owner         String
  slug          String
  repo          String
  root          String               @default("")
  initFile      String
  branch        String
  leaderkey     String               @default("unknown")
  fork          Boolean
  githubId      Int
  stars         Int
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  pluginManager NeovimPluginManager?
  createdAt     DateTime             @default(now())
  lastSyncedAt  DateTime             @default(now())

  neovimConfigPlugins    NeovimConfigPlugins[]
  languageServerMappings NeovimConfigToLanguageServer[]
  syncs                  NeovimConfigSync[]

  @@unique([owner, repo, root])
  @@unique([owner, slug])
}

enum NeovimPluginManager {
  Lazy
  Packer
}

model NeovimPlugin {
  id               Int      @id @default(autoincrement())
  owner            String
  name             String
  type             String
  source           String
  category         String
  link             String
  shortDescription String
  createdAt        DateTime @default(now())
  readme           String   @default("")
  stars            Int      @default(0)

  neovimConfigPlugins NeovimConfigPlugins[]

  lastSyncedAt  DateTime?
  addedLastWeek Int       @default(0)

  @@unique([owner, name])
}

model LanguageServer {
  name                     String
  configMappings           NeovimConfigToLanguageServer[]
  NeovimConfigSync         NeovimConfigSync?              @relation(fields: [neovimConfigSyncConfigId, neovimConfigSyncSha], references: [configId, sha])
  neovimConfigSyncConfigId Int?
  neovimConfigSyncSha      String?

  @@id([name])
  @@unique([name])
}

model NeovimConfigToLanguageServer {
  languageServer     LanguageServer @relation(fields: [languageServerName], references: [name], onDelete: Cascade)
  languageServerName String

  config         NeovimConfig @relation(fields: [neovimConfigId], references: [id])
  configId       Int
  neovimConfigId Int

  @@id([languageServerName, configId])
}

model NeovimConfigPlugins {
  config    NeovimConfig      @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  plugin    NeovimPlugin      @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginId  Int
  createdAt DateTime          @default(now())
  sync      NeovimConfigSync? @relation(fields: [sha, configId], references: [sha, configId], onDelete: Cascade)
  sha       String?

  @@id([configId, pluginId])
}

model NeovimConfigSync {
  sha                   String
  syncedAt              DateTime              @default(now())
  syncedPlugins         NeovimConfigPlugins[]
  syncedLanguageServers LanguageServer[]
  config                NeovimConfig          @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId              Int

  @@id([configId, sha])
  @@unique([sha, configId])
}
