// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  avatarUrl        String
  githubId         Int                @unique
  githubToken      GithubToken?
  neovimConfigs    NeovimConfig[]
  createdAt        DateTime           @default(now())
  lastLoginAt      DateTime           @default(now())
  loginCount       Int                @default(0)
  GithubRepository GithubRepository[]
}

model GithubToken {
  id          Int      @id @default(autoincrement())
  accessToken String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @unique
  createdAt   DateTime @default(now())
}

model NeovimConfig {
  id            Int                  @id @default(autoincrement())
  owner         String
  slug          String
  repo          String
  root          String               @default("")
  initFile      String
  branch        String
  leaderkey     String               @default("unknown")
  fork          Boolean
  githubId      Int
  stars         Int
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  pluginManager NeovimPluginManager?
  createdAt     DateTime             @default(now())
  lastSyncedAt  DateTime             @default(now())

  neovimConfigPlugins    NeovimConfigPlugins[]
  languageServerMappings NeovimConfigToLanguageServer[]
  syncs                  NeovimConfigSync[]

  @@unique([owner, repo, root])
  @@unique([owner, slug])
}

enum NeovimPluginManager {
  Lazy
  Packer
}

model NeovimPlugin {
  id               Int      @id @default(autoincrement())
  owner            String
  name             String
  type             String
  source           String
  category         String
  link             String
  shortDescription String
  createdAt        DateTime @default(now())
  readme           String   @default("")
  stars            Int      @default(0)

  neovimConfigPlugins NeovimConfigPlugins[]
  configPlugins       NvimConfigPlugins[]

  lastSyncedAt  DateTime?
  addedLastWeek Int       @default(0)

  breakChanges BreakingChange[]

  media Media[]

  @@unique([owner, name])
}

model LanguageServer {
  name           String
  configMappings NeovimConfigToLanguageServer[]
  nvimMappings   NvimConfigToLanguageServer[]

  @@id([name])
  @@unique([name])
}

model NeovimConfigToLanguageServer {
  languageServer     LanguageServer    @relation(fields: [languageServerName], references: [name], onDelete: Cascade)
  languageServerName String
  config             NeovimConfig      @relation(fields: [configId], references: [id])
  configId           Int
  sync               NeovimConfigSync? @relation(fields: [configId, sha], references: [configId, sha])
  sha                String

  @@id([languageServerName, configId])
}

model NvimConfigToLanguageServer {
  id                 Int            @id @default(autoincrement())
  languageServer     LanguageServer @relation(fields: [languageServerName], references: [name], onDelete: Cascade)
  languageServerName String
  config             NvimConfig     @relation(fields: [configId], references: [id])
  configId           Int
  sync               NvimConfigSync @relation(fields: [syncId], references: [id])
  syncId             Int

  @@unique([languageServerName, configId])
}

model NvimConfigPlugins {
  id        Int             @id @default(autoincrement())
  config    NvimConfig      @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  plugin    NeovimPlugin    @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginId  Int
  createdAt DateTime        @default(now())
  sync      NvimConfigSync? @relation(fields: [syncId], references: [id], onDelete: Cascade)
  syncId    Int?

  @@unique([configId, pluginId])
}

model NeovimConfigPlugins {
  config    NeovimConfig      @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  plugin    NeovimPlugin      @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginId  Int
  createdAt DateTime          @default(now())
  sync      NeovimConfigSync? @relation(fields: [sha, configId], references: [sha, configId], onDelete: Cascade)
  sha       String?

  @@id([configId, pluginId])
}

model NeovimConfigSync {
  // TODO: remove, legacy
  sha                   String
  syncedAt              DateTime                       @default(now())
  syncedPlugins         NeovimConfigPlugins[]
  syncedLanguageServers NeovimConfigToLanguageServer[]
  config                NeovimConfig                   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId              Int

  @@id([configId, sha])
}

model NvimConfigSync {
  id                    Int                          @id @default(autoincrement())
  sha                   String
  syncedAt              DateTime                     @default(now())
  syncedPlugins         NvimConfigPlugins[]
  syncedLanguageServers NvimConfigToLanguageServer[]
  config                NvimConfig                   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId              Int

  @@unique([sha, configId])
}

model Post {
  id             String          @id @default(uuid())
  title          String
  text           String
  type           String
  breakingChange BreakingChange?
  createdAt      DateTime        @default(now())
}

model TwinPost {
  title       String
  issue       Int       @id @unique
  createdAt   DateTime  @default(now())
  publishedAt DateTime? @default(now())
  content     String
  license     String?
}

model BreakingChange {
  id          Int          @id @default(autoincrement())
  post        Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String       @unique
  plugin      NeovimPlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginId    Int
  externalUrl String       @unique
  sha         String
}

model Media {
  id             Int           @id @default(autoincrement())
  url            String        @unique
  type           String        @default("")
  NeovimPlugin   NeovimPlugin? @relation(fields: [neovimPluginId], references: [id])
  neovimPluginId Int?
}

model GithubRepository {
  id         Int          @id @default(autoincrement())
  githubId   Int          @unique
  owner      String
  name       String
  readme     String       @default("")
  createdAt  DateTime     @default(now())
  tools      ToolConfig[]
  stars      Int
  fork       Boolean
  mainBranch String
  user       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?

  @@unique([owner, name])
}

model Tool {
  name    String
  configs ToolConfig[]

  @@id([name])
  @@unique([name])
}

model ToolConfig {
  id           Int              @id @default(autoincrement())
  tool         Tool             @relation(fields: [toolName], references: [name], onDelete: Cascade)
  toolName     String
  slug         String
  repository   GithubRepository @relation(fields: [repositoryId], references: [id])
  repositoryId Int
  root         String           @default("/")
  createdAt    DateTime         @default(now())

  nvimConfig NvimConfig?

  @@unique([repositoryId, root])
  @@unique([repositoryId, slug])
}

model NvimConfig {
  id                     Int                          @id @default(autoincrement())
  toolConfig             ToolConfig                   @relation(fields: [toolConfigId], references: [id], onDelete: Cascade)
  toolConfigId           Int                          @unique
  initFile               String
  pluginManager          String                       @default("unknown")
  leaderkey              String                       @default("unknown")
  lastSyncedAt           DateTime                     @default(now())
  neovimConfigPlugins    NvimConfigPlugins[]
  languageServerMappings NvimConfigToLanguageServer[]
  syncs                  NvimConfigSync[]
}
